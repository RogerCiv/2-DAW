/**
 * AEMET OpenData
 * AEMET OpenData es una API REST desarrollado por AEMET que permite la difusión y la reutilización de la información meteorológica y climatológica de la Agencia, en el sentido indicado en la Ley 18/2015, de 9 de julio, por la que se modifica la Ley 37/2007, de 16 de noviembre, sobre reutilización de la información del sector público. (IMPORTANTE: Para poder realizar peticiones, es necesario introducir en API Key haciendo clic en el círculo rojo de recurso REST).
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Model200', 'model/Model401', 'model/Model404', 'model/Model429'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Model200'), require('../model/Model401'), require('../model/Model404'), require('../model/Model429'));
  } else {
    // Browser globals (root is window)
    if (!root.AemetOpenData) {
      root.AemetOpenData = {};
    }
    root.AemetOpenData.PrediccionesEspecificasApi = factory(root.AemetOpenData.ApiClient, root.AemetOpenData.Model200, root.AemetOpenData.Model401, root.AemetOpenData.Model404, root.AemetOpenData.Model429);
  }
}(this, function(ApiClient, Model200, Model401, Model404, Model429) {
  'use strict';

  /**
   * PrediccionesEspecificas service.
   * @module api/PrediccionesEspecificasApi
   * @version 2.0
   */

  /**
   * Constructs a new PrediccionesEspecificasApi. 
   * @alias module:api/PrediccionesEspecificasApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the informacionNivologica_ operation.
     * @callback module:api/PrediccionesEspecificasApi~informacionNivologica_Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Información nivológica.
     * Información nivológica para la zona montañosa que se pasa como parámetro (area).
     * @param {String} area  | Código de  Área Montañosa |  Área Montañosa | |----------|----------| | 0 | Pirineo Catalán  | | 1  | Pirineo Navarro y Aragonés
     * @param {module:api/PrediccionesEspecificasApi~informacionNivologica_Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200}
     */
    this.informacionNivologica_ = function(area, callback) {
      var postBody = null;

      // verify the required parameter 'area' is set
      if (area === undefined || area === null) {
        throw new Error("Missing the required parameter 'area' when calling informacionNivologica_");
      }


      var pathParams = {
        'area': area
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Model200;

      return this.apiClient.callApi(
        '/api/prediccion/especifica/nivologica/{area}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the prediccinDeMontaaTiempoActual_ operation.
     * @callback module:api/PrediccionesEspecificasApi~prediccinDeMontaaTiempoActual_Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Predicción de montaña. Tiempo actual.
     * Predicción meteorológica para la zona montañosa que se pasa como parámetro (area) con validez para el día (día).  Periodicidad de actualización: continuamente.
     * @param {String} area  | Código de Área Montañosa | Área Montañosa | |----------|----------| | peu1 | Picos de Europa   | | nav1  | Pirineo Navarro   | | arn1  | Pirineo Aragonés  | | cat1  | Pirineo Catalán   | | rio1  | Ibérica Riojana   | | arn2  | Ibérica Aragonesa   | | mad2  | Sierras de Guadarrama y Somosierra  | | gre1  | Sierra de Gredos   | | nev1  | Sierra Nevada
     * @param {String} dia  | Código de día | Día | |----------|----------| | 0 | día actual  | | 1  | d+1 (mañana)   | | 2  | d+2 (pasado mañana)  | | 3  | d+3 (siguente a pasado mañana)
     * @param {module:api/PrediccionesEspecificasApi~prediccinDeMontaaTiempoActual_Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200}
     */
    this.prediccinDeMontaaTiempoActual_ = function(area, dia, callback) {
      var postBody = null;

      // verify the required parameter 'area' is set
      if (area === undefined || area === null) {
        throw new Error("Missing the required parameter 'area' when calling prediccinDeMontaaTiempoActual_");
      }

      // verify the required parameter 'dia' is set
      if (dia === undefined || dia === null) {
        throw new Error("Missing the required parameter 'dia' when calling prediccinDeMontaaTiempoActual_");
      }


      var pathParams = {
        'area': area,
        'dia': dia
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Model200;

      return this.apiClient.callApi(
        '/api/prediccion/especifica/montaña/pasada/area/{area}/dia/{dia}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the prediccinDeMontaaTiempoPasado_ operation.
     * @callback module:api/PrediccionesEspecificasApi~prediccinDeMontaaTiempoPasado_Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Predicción de montaña. Tiempo pasado.
     * Breve resumen con lo más significativo de las condiciones meteorológicas registradas en la zona de montaña que se pasa como parámetro (area) en las últimas 24-36 horas.
     * @param {String} area  | Código de Área Montañosa | Área Montañosa | |----------|----------| | peu1 | Picos de Europa   | | nav1  | Pirineo Navarro   | | arn1  | Pirineo Aragonés  | | cat1  | Pirineo Catalán   | | rio1  | Ibérica Riojana   | | arn2  | Ibérica Aragonesa   | | mad2  | Sierras de Guadarrama y Somosierra  | | gre1  | Sierra de Gredos   | | nev1  | Sierra Nevada
     * @param {module:api/PrediccionesEspecificasApi~prediccinDeMontaaTiempoPasado_Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200}
     */
    this.prediccinDeMontaaTiempoPasado_ = function(area, callback) {
      var postBody = null;

      // verify the required parameter 'area' is set
      if (area === undefined || area === null) {
        throw new Error("Missing the required parameter 'area' when calling prediccinDeMontaaTiempoPasado_");
      }


      var pathParams = {
        'area': area
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Model200;

      return this.apiClient.callApi(
        '/api/prediccion/especifica/montaña/pasada/area/{area}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the prediccinDeRadiacinUltravioletaUVI_ operation.
     * @callback module:api/PrediccionesEspecificasApi~prediccinDeRadiacinUltravioletaUVI_Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Predicción de radiación ultravioleta (UVI).
     *  Predicción de Índice de radiación UV máximo en condiciones de cielo despejado para el día seleccionado.
     * @param {String} dia  | Código de día | Día | |----------|----------| | 0 | día actual  | | 1  | d+1 (mañana)   | | 2  | d+2 (pasado mañana)  | | 3  | d+3 (dentro de 3 días) | | 4  | d+4 (dentro de 4 días)
     * @param {module:api/PrediccionesEspecificasApi~prediccinDeRadiacinUltravioletaUVI_Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200}
     */
    this.prediccinDeRadiacinUltravioletaUVI_ = function(dia, callback) {
      var postBody = null;

      // verify the required parameter 'dia' is set
      if (dia === undefined || dia === null) {
        throw new Error("Missing the required parameter 'dia' when calling prediccinDeRadiacinUltravioletaUVI_");
      }


      var pathParams = {
        'dia': dia
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Model200;

      return this.apiClient.callApi(
        '/api/prediccion/especifica/uvi/{dia}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the prediccinParaLasPlayasTiempoActual_ operation.
     * @callback module:api/PrediccionesEspecificasApi~prediccinParaLasPlayasTiempoActual_Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Predicción para las playas. Tiempo actual.
     * La predicción diaria de la playa que se pasa como parámetro. Establece el estado de nubosidad para unas horas determinadas, las 11 y las 17 hora oficial. Se analiza también si se espera precipitación en el entorno de esas horas, entre las 08 y las 14 horas y entre las 14 y 20 horas.
     * @param {String} playa Código de playa   http://www.aemet.es/documentos/es/eltiempo/prediccion/playas/Playas_codigos.csv
     * @param {module:api/PrediccionesEspecificasApi~prediccinParaLasPlayasTiempoActual_Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200}
     */
    this.prediccinParaLasPlayasTiempoActual_ = function(playa, callback) {
      var postBody = null;

      // verify the required parameter 'playa' is set
      if (playa === undefined || playa === null) {
        throw new Error("Missing the required parameter 'playa' when calling prediccinParaLasPlayasTiempoActual_");
      }


      var pathParams = {
        'playa': playa
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Model200;

      return this.apiClient.callApi(
        '/api/prediccion/especifica/playa/{playa}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the prediccinPorMunicipiosDiariaTiempoActual_ operation.
     * @callback module:api/PrediccionesEspecificasApi~prediccinPorMunicipiosDiariaTiempoActual_Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Predicción por municipios diaria. Tiempo actual.
     * Predicción para el municipio que se pasa como parámetro (municipio). Periodicidad de actualización: continuamente.
     * @param {String} municipio Código de municipio   http://www.ine.es/daco/daco42/codmun/codmunmapa.htm
     * @param {module:api/PrediccionesEspecificasApi~prediccinPorMunicipiosDiariaTiempoActual_Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200}
     */
    this.prediccinPorMunicipiosDiariaTiempoActual_ = function(municipio, callback) {
      var postBody = null;

      // verify the required parameter 'municipio' is set
      if (municipio === undefined || municipio === null) {
        throw new Error("Missing the required parameter 'municipio' when calling prediccinPorMunicipiosDiariaTiempoActual_");
      }


      var pathParams = {
        'municipio': municipio
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Model200;

      return this.apiClient.callApi(
        '/api/prediccion/especifica/municipio/diaria/{municipio}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the prediccinPorMunicipiosHorariaTiempoActual_ operation.
     * @callback module:api/PrediccionesEspecificasApi~prediccinPorMunicipiosHorariaTiempoActual_Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Predicción por municipios horaria. Tiempo actual.
     * Predicción horaria para el municipio que se pasa como parámetro (municipio). Presenta la información de hora en hora hasta 48 horas.
     * @param {String} municipio Código de municipio  http://www.ine.es/daco/daco42/codmun/codmunmapa.htm
     * @param {module:api/PrediccionesEspecificasApi~prediccinPorMunicipiosHorariaTiempoActual_Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200}
     */
    this.prediccinPorMunicipiosHorariaTiempoActual_ = function(municipio, callback) {
      var postBody = null;

      // verify the required parameter 'municipio' is set
      if (municipio === undefined || municipio === null) {
        throw new Error("Missing the required parameter 'municipio' when calling prediccinPorMunicipiosHorariaTiempoActual_");
      }


      var pathParams = {
        'municipio': municipio
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Model200;

      return this.apiClient.callApi(
        '/api/prediccion/especifica/municipio/horaria/{municipio}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
