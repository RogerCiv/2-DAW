import { users } from './assets/modules.js'

//Insertar elementos en el localStorage

//localStorage.setItem("nombre","Roger")

//const usuario = {"name":"Roger","cp":18000}
//localStorage.setItem("user",JSON.stringify(usuario))

//alert(localStorage.getItem("user",usuario))

//localStorage.removeItem("nombre")
//localStorage.clear()
//localStorage.setItem("misUsers",JSON.stringify(users))

/**
 * @description: Crear una pagina web que tenga la siguiente estructura: Un header que ocupe todo el ancho de la pagina que tenga el nombre de nuestro proyecto , seguidamente tendremos dos secciones que parten la pagina en 2 partes, justamente por la mitad. La parte de la izquierda dispondremos de un formulario login que contendra los campos username password y boton de guardar La parte de la derecha tendremos un titulo que diga USUARIOS ALMACENADOS y un TEXT AREA junto con el boton de CARGAR.
 * 
 * LA funcionalidad sera la siguiente: 
 * 1. Cargaremos todos los usuarios de JSON PLACEHOLDERS en una variable llamada USERS y atraves de una funcion a la que pasemos esa variable guardara los usernames y el password de dichos usuarios dentro del local storage. La password será encriptada antes de ser almacenada.
 * 2. A traves del formulario introducire un nombre y una password, si el nombre no esta guardado en el local storage, almacenaremos el usuario y passwrod encriptada dentro del localstorage. Si ya estuviera almacenada, mostrara OK LOGUEADO.
 * 3. A traves del boton cargar sacaremos el nombre de usuario y password desencriptada de todos los usuarios almacenados en el local storage.
 * Para encriptar la contraseña utilizaremos btoa("cadena a encriptar") y atbo("cadena a desencriptar")
 */

//const username = document.getElementById("username");
//const password = document.getElementById("password");
const form = document.getElementById("form");
const textaarea = document.getElementById("infouserpassword");
const btnCargar = document.getElementById("cargar");

function  handleSubmit(event) {
    event.preventDefault();
    checkInLocalStorage();
}
function handleTextArea(event){
    event.preventDefault();
     loadTextAreaUsers();
}
function saveUsersLocalStorage(arr) {
    arr.forEach(user => {
        //usersLocalStorage[user.login.username] = btoa(user.login.password);
        localStorage.setItem(user.login.username, btoa(user.login.password))
    });
}

saveUsersLocalStorage(users);

/*
function checkInLocalStorage(){
    localStorage.getItem(username.value) ? alert(" EXISTE") : localStorage.setItem(username.value, btoa(password.value))
}*/

function checkInLocalStorage() {
    if(localStorage.getItem(username.value)){
        alert('EXISTE')
    }else{
        localStorage.setItem(username.value, btoa(password.value))
    }
}

function loadTextAreaUsers() {
   /* let userData = "";
    for (const key in localStorage) {
        if (localStorage.hasOwnProperty(key)) {
            const decryptedPassword = atob(localStorage.getItem(key));
            userData += `Usuario: ${key}, Contraseña: ${decryptedPassword}\n`;
        }
    }
    textaarea.value = userData;
    */
   let userData = "";
    for (const key of Object.keys(localStorage)) {
        const decryptedPassword = atob(localStorage.getItem(key));
        userData += `Usuario: ${key} Contraseña: ${decryptedPassword}\n`;
    }
    
    textaarea.value = userData;
    /*
    textaarea.value = Object.keys(localStorage).map((el,i) => "Usuario: "+ el + " -- Password: "+atob(Object.values(localStorage)[i] + "\n"));
    textaarea.value = textaarea.value.replaceAll(","," ");
    */
}



form.addEventListener("submit", handleSubmit);
btnCargar.addEventListener('click',handleTextArea);








------------------------ version 2-------------------
import users from './assets/modules.js';

// ------- Declaración de variables GLOBALES ----------

let myStructUsers = [];
const form = document.getElementById('form');
const btnCargar = document.getElementById('cargar');
const textaarea = document.getElementById("infouserpassword");
// Creamos una funcion que guarde en el localStorage la estructura usuarios .

/**
 * 
 * @param {Array} structData 
 * @returns 
 */
function insertUsers (key,structData) {
    return localStorage.setItem(key, JSON.stringify(structData));
}

insertUsers("Users",users);

// Creamos una funcion que cargue del localStorage la estructura cuyo nombre le pase como parametro.

function loadStructData(key){
    
    return JSON.parse(localStorage.getItem(key));
}



//Guardar en una estructura de datos el username y password(codificado) de todos los usuarios de mi estructura Y de los nuevos usuarios que vaya a introducir. SIN REPETIR el username. y  despues se vuelca al LOcal storage.



function saveUserAndPassword(key,structUsers){
    const tmpArray = [];
    /*
    for(const key of Object.keys(structUsers)){
       array.push(localStorage.setItem([structData.login.username], structData.login.password)
    }
    */
   structUsers.map(user => {
       tmpArray.push({[user.login.username] : btoa(user.login.password)});// cuidado con los [] de la clave
    })
   // return localStorage.setItem(key,JSON.stringify(tmpArray));
   return localStorage.setItem(key, JSON.stringify(tmpArray));

}


// funcion que guarde del formulario los datos en mi estructura de datos con username, password(codificado) no se puede repetir el username.
/*
function saveNewUserLocalStorage(key,username,password){
    //const tmpArray = JSON.parse(localStorage.getItem(key)) //array objetos [{username1,password1}]
    let tmpArray = JSON.parse(localStorage.getItem(key)) || []; 
    let encontrado = false;
    tmpArray.map(objeto =>
         objeto.hasOwnProperty(username) 
        ? (encontrado = true)
        : false);
        
      // objeto.hasOwnProperty(username) && (encontrado = true) );
       
       //!encontrado ? aqui guardo : no hago nada
       !encontrado
        ? tmpArray.push({ [username]: btoa(password) }) 
        : alert(`Èl usuario con username ${username} ya existe`);
       
       localStorage.setItem(key,JSON.stringify(tmpArray));
       
    }
*/

function saveNewUserLocalStorage(key, username, password) {
  let tmpArray = JSON.parse(localStorage.getItem(key)) || []; // Si no hay datos en el localStorage, inicializa tmpArray como un array vacío

  let encontrado = false;

  tmpArray.map((objeto) =>
      objeto.hasOwnProperty(username)
          ? (encontrado = true)
          : false
  );

  // !encontrado ? aquí guardo : no hago nada
  !encontrado
      ? tmpArray.push({ [username]: btoa(password) })
      : alert(`El usuario con username ${username} ya existe`);


  localStorage.setItem(key, JSON.stringify(tmpArray));
  
}


function save(event){
    event.preventDefault();
    //capturar lo que he escrito en el formulario y guardarlo en variables
    const username = document.getElementById('username').value;
    
    const password = document.getElementById('password').value;
    console.log(`Username: ${username}, Password: ${password}`);
    // llamara a mi funcion que guardaba en la key y el username y el password.
    //si lo guarda, alert indicando que ha sido guardado y borro el formulario.
    saveNewUserLocalStorage("newUsers",username.value,password.value);
    alert("Usuario guardado");
    form.reset();
}
function load(event){
    event.preventDefault();
    const data =  loadStructData("newUsers");
    let userData = "";
    for (const [key, value] of Object.entries(data)) {
        const username = key;
        const decryptedPassword = atob(value);
        userData += `Usuario: ${username} Contraseña: ${decryptedPassword}\n`;
    }
    textaarea.value = userData;
}

myStructUsers = loadStructData("Users");
saveUserAndPassword("newUsers",myStructUsers);


form.addEventListener("submit", save);

btnCargar.addEventListener("click", load);

